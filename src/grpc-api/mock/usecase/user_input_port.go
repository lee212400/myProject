// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/user_input_port.go
//
// Generated by this command:
//
//	mockgen -source=./usecase/user_input_port.go -destination=./mock/usecase/user_input_port.go -package usecase
//

// Package usecase is a generated GoMock package.
package usecase

import (
	reflect "reflect"

	entity "github.com/lee212400/myProject/domain/entity"
	dto "github.com/lee212400/myProject/usecase/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockUserInputPort is a mock of UserInputPort interface.
type MockUserInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockUserInputPortMockRecorder
	isgomock struct{}
}

// MockUserInputPortMockRecorder is the mock recorder for MockUserInputPort.
type MockUserInputPortMockRecorder struct {
	mock *MockUserInputPort
}

// NewMockUserInputPort creates a new mock instance.
func NewMockUserInputPort(ctrl *gomock.Controller) *MockUserInputPort {
	mock := &MockUserInputPort{ctrl: ctrl}
	mock.recorder = &MockUserInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInputPort) EXPECT() *MockUserInputPortMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserInputPort) CreateUser(ctx *entity.Context, in *dto.CreateUserInputDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserInputPortMockRecorder) CreateUser(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserInputPort)(nil).CreateUser), ctx, in)
}

// DeleteUser mocks base method.
func (m *MockUserInputPort) DeleteUser(ctx *entity.Context, in *dto.DeleteUserInputDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserInputPortMockRecorder) DeleteUser(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserInputPort)(nil).DeleteUser), ctx, in)
}

// GetUser mocks base method.
func (m *MockUserInputPort) GetUser(ctx *entity.Context, in *dto.GetUserInputDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserInputPortMockRecorder) GetUser(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserInputPort)(nil).GetUser), ctx, in)
}

// UpdateUser mocks base method.
func (m *MockUserInputPort) UpdateUser(ctx *entity.Context, in *dto.UpdateUserInputDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserInputPortMockRecorder) UpdateUser(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserInputPort)(nil).UpdateUser), ctx, in)
}
