// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/repository/postProcess.go
//
// Generated by this command:
//
//	mockgen -source=./usecase/repository/postProcess.go -destination=./mock/repository/postProcess.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	entity "github.com/lee212400/myProject/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockPostProcessRepository is a mock of PostProcessRepository interface.
type MockPostProcessRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostProcessRepositoryMockRecorder
	isgomock struct{}
}

// MockPostProcessRepositoryMockRecorder is the mock recorder for MockPostProcessRepository.
type MockPostProcessRepositoryMockRecorder struct {
	mock *MockPostProcessRepository
}

// NewMockPostProcessRepository creates a new mock instance.
func NewMockPostProcessRepository(ctrl *gomock.Controller) *MockPostProcessRepository {
	mock := &MockPostProcessRepository{ctrl: ctrl}
	mock.recorder = &MockPostProcessRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostProcessRepository) EXPECT() *MockPostProcessRepositoryMockRecorder {
	return m.recorder
}

// PostProcess mocks base method.
func (m *MockPostProcessRepository) PostProcess(ctx *entity.Context, err *error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostProcess", ctx, err)
}

// PostProcess indicates an expected call of PostProcess.
func (mr *MockPostProcessRepositoryMockRecorder) PostProcess(ctx, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProcess", reflect.TypeOf((*MockPostProcessRepository)(nil).PostProcess), ctx, err)
}
