// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sample

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSample = `-- name: CreateSample :one
INSERT INTO samples (
  sample_title, sample_memo
) VALUES (
  $1, $2
)
RETURNING id, sample_title, sample_memo
`

type CreateSampleParams struct {
	SampleTitle string
	SampleMemo  pgtype.Text
}

func (q *Queries) CreateSample(ctx context.Context, arg CreateSampleParams) (Sample, error) {
	row := q.db.QueryRow(ctx, createSample, arg.SampleTitle, arg.SampleMemo)
	var i Sample
	err := row.Scan(&i.ID, &i.SampleTitle, &i.SampleMemo)
	return i, err
}

const deleteSample = `-- name: DeleteSample :exec
DELETE FROM samples
WHERE id = $1
`

func (q *Queries) DeleteSample(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSample, id)
	return err
}

const getSample = `-- name: GetSample :one
SELECT id, sample_title, sample_memo FROM samples
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSample(ctx context.Context, id int64) (Sample, error) {
	row := q.db.QueryRow(ctx, getSample, id)
	var i Sample
	err := row.Scan(&i.ID, &i.SampleTitle, &i.SampleMemo)
	return i, err
}

const listSamples = `-- name: ListSamples :many
SELECT id, sample_title, sample_memo FROM samples
ORDER BY sample_title
`

func (q *Queries) ListSamples(ctx context.Context) ([]Sample, error) {
	rows, err := q.db.Query(ctx, listSamples)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sample
	for rows.Next() {
		var i Sample
		if err := rows.Scan(&i.ID, &i.SampleTitle, &i.SampleMemo); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSample = `-- name: UpdateSample :exec
UPDATE samples
  set sample_title = $2,
  sample_memo = $3
WHERE id = $1
`

type UpdateSampleParams struct {
	ID          int64
	SampleTitle string
	SampleMemo  pgtype.Text
}

func (q *Queries) UpdateSample(ctx context.Context, arg UpdateSampleParams) error {
	_, err := q.db.Exec(ctx, updateSample, arg.ID, arg.SampleTitle, arg.SampleMemo)
	return err
}
